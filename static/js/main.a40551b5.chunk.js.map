{"version":3,"sources":["components/main/img/box2.png","components/main/img/icon.svg","components/main/img/present.png","components/main/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","useState","activeTabs","setActiveTabs","login","setLogin","password","setPassword","onClickTabs","id","includes","filtered","filter","item","className","src","Icon","alt","Banner","onClick","cn","href","Box","type","placeholder","value","onChange","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,yQCiJ5BC,EA1IE,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACdC,EADc,KACFC,EADE,OAGKF,mBAAS,IAHd,mBAGdG,EAHc,KAGPC,EAHO,OAIWJ,mBAAS,IAJpB,mBAIdK,EAJc,KAIJC,EAJI,KAMfC,EAAc,SAACC,GAGnB,GAFaP,EAAWQ,SAASD,GAEvB,CACR,IAAME,EAAWT,EAAWU,QAAO,SAACC,GAAD,OAAUA,IAASJ,KACtDN,EAAcQ,QAEdR,EAAc,GAAD,mBAAKD,GAAL,CAAiBO,MAIlC,OACE,yBAAKK,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,qBAAf,WACA,yBAAKA,UAAU,qBAAf,uEACA,yBAAKA,UAAU,4BACb,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,yBAAKH,UAAU,UAAf,8GAGJ,yBAAKA,UAAU,cACb,yBAAKA,UAAU,oBAAf,0PAGA,yBAAKA,UAAU,0BAAf,oLAC4C,6BAD5C,iRAMJ,yBAAKA,UAAU,gBACb,yBAAKC,IAAKG,IAAQD,IAAI,YAExB,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,uBAAuBK,QAAS,kBAAMX,EAAY,KAC/D,yBAAKM,UAAU,wBAAf,iUAGA,yBACEA,UAAWM,IAAG,wBAAyB,CACrC,+BAAgClB,EAAWQ,SAAS,QAIzDR,EAAWQ,SAAS,GACnB,yBAAKI,UAAU,wBACb,yBAAKA,UAAU,+BAAf,0kBAEqD,6BAFrD,IAE4D,6BAAO,IAFnE,mmBAI8D,IAC5D,uBAAGA,UAAU,OAAOO,KAAK,KAAzB,iBALF,4/BAU6D,6BAAO,IAClE,6BAXF,0iCAgBA,yBAAKP,UAAU,uBACb,yBAAKC,IAAKO,IAAKL,IAAI,OAGrB,KAEJ,yBAAKH,UAAU,uBAAuBK,QAAS,kBAAMX,EAAY,KAC/D,yBAAKM,UAAU,wBAAf,uQAGA,yBACEA,UAAWM,IAAG,wBAAyB,CACrC,+BAAgClB,EAAWQ,SAAS,QAIzDR,EAAWQ,SAAS,GACnB,yBAAKI,UAAU,wBACb,yBAAKA,UAAU,+BAAf,8xCAMA,yBAAKA,UAAU,uBACb,yBAAKC,IAAKO,IAAKL,IAAI,MAErB,yBAAKH,UAAU,yBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,yBACb,2BACES,KAAK,OACLC,YAAY,iCACZC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOH,UAE1B,KAAVrB,EACC,4BACEU,UAAU,QACVK,QAAS,kBAAMd,EAAS,OAExB,MAEN,yBAAKS,UAAU,yBACb,2BACES,KAAK,OACLC,YAAY,uCACZC,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAAYoB,EAAEC,OAAOH,UAE1B,KAAbnB,EACC,4BACEQ,UAAU,QACVK,QAAS,kBAAMZ,EAAY,OAE3B,OAGR,4BAAQO,UAAU,0BAAlB,0HAKF,QChIGe,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCKcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a40551b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/box2.8a507a55.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.e2f3535f.svg\";","module.exports = __webpack_public_path__ + \"static/media/present.3fef2573.png\";","import React, { useState } from \"react\";\r\nimport \"./styles/style.scss\";\r\nimport Icon from \"./img/icon.svg\";\r\nimport Banner from \"./img/present.png\";\r\nimport Box from \"./img/box2.png\";\r\nimport cn from \"classnames\";\r\n\r\nconst MainPage = () => {\r\n  const [activeTabs, setActiveTabs] = useState([]);\r\n\r\n  const [login, setLogin] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const onClickTabs = (id) => {\r\n    const open = activeTabs.includes(id);\r\n\r\n    if (open) {\r\n      const filtered = activeTabs.filter((item) => item !== id);\r\n      setActiveTabs(filtered);\r\n    } else {\r\n      setActiveTabs([...activeTabs, id]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"main-block\">\r\n        <div className=\"main__header\">\r\n          <div className=\"main__header-item\">GENOTEK</div>\r\n          <div className=\"main__header-item\">неделю назад</div>\r\n          <div className=\"main__header-item_access\">\r\n            <img src={Icon} alt=\"icon\" />\r\n            <div className=\"mobile\">доступно только мне</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"main__info\">\r\n          <div className=\"main__info-title\">\r\n            Подарочный набор для сдачи ДНК-теста доставлен\r\n          </div>\r\n          <div className=\"main__info-description\">\r\n            Спасибо, что выбрали Genotek! На упаковке <br /> вы найдете\r\n            подробную инструкцию как сдать ДНК-тест.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"main__banner\">\r\n        <img src={Banner} alt=\"banner\" />\r\n      </div>\r\n      <div className=\"main__accordion\">\r\n        <div className=\"main__accordion-item\" onClick={() => onClickTabs(1)}>\r\n          <div className=\"main__accordion-text\">\r\n            Как подарить набор другу, чтобы он создал свой личный кабинет?\r\n          </div>\r\n          <div\r\n            className={cn(\"main__accordion-arrow\", {\r\n              \"main__accordion-arrow_active\": activeTabs.includes(1),\r\n            })}\r\n          ></div>\r\n        </div>\r\n        {activeTabs.includes(1) ? (\r\n          <div className=\"main__accordion-open\">\r\n            <div className=\"main__accordion-description\">\r\n              Все просто! На подарочной упаковке ДНК-теста указан временный\r\n              логин и пароль, который защищен стираемой полосой. <br /> <br />{\" \"}\r\n              Человеку, который получил ДНК-тест в подарок, нужно ввести\r\n              временный логин и пароль на странице входа в личный кабинет{\" \"}\r\n              <a className=\"link\" href=\"/\">\r\n                lk.genotek.ru\r\n              </a>\r\n              . После этого ему будет предложено зарегистрироваться или указать\r\n              данные уже зарегистрированного пользователя, ввести номер пробирки\r\n              и вызвать курьера для доставки биоматериала в лабораторию. <br />{\" \"}\r\n              <br /> Обратите внимание, что по умолчанию вы не получите доступ к\r\n              результатам ДНК-теста того, кому вы подарили тест. Но вы можете\r\n              попросить вашего близкого поделиться с вами результатами в его\r\n              настройках профиля.\r\n            </div>\r\n            <div className=\"main__accordion-pic\">\r\n              <img src={Box} alt=\"\" />\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div className=\"main__accordion-item\" onClick={() => onClickTabs(2)}>\r\n          <div className=\"main__accordion-text\">\r\n            Хочу активировать ДНК-тест в этом личном кабинете\r\n          </div>\r\n          <div\r\n            className={cn(\"main__accordion-arrow\", {\r\n              \"main__accordion-arrow_active\": activeTabs.includes(2),\r\n            })}\r\n          ></div>\r\n        </div>\r\n        {activeTabs.includes(2) ? (\r\n          <div className=\"main__accordion-open\">\r\n            <div className=\"main__accordion-description\">\r\n              На подарочной упаковке ДНК-теста указан временный логин и пароль,\r\n              который защищен стираемой полосой. Пожалуйста, введите их ниже.\r\n              После ввода временных данных, вы сможете ввести номер пробирки и\r\n              вызвать курьера для доставки биоматериала в лабораторию.\r\n            </div>\r\n            <div className=\"main__accordion-pic\">\r\n              <img src={Box} alt=\"\" />\r\n            </div>\r\n            <div className=\"main__accordion-block\">\r\n              <div className=\"main__accordion-login\">\r\n                <div className=\"main__accordion-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Логин\"\r\n                    value={login}\r\n                    onChange={(e) => setLogin(e.target.value)}\r\n                  />\r\n                  {login !== \"\" ? (\r\n                    <button\r\n                      className=\"clear\"\r\n                      onClick={() => setLogin(\"\")}\r\n                    ></button>\r\n                  ) : null}\r\n                </div>\r\n                <div className=\"main__accordion-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Пароль\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                  {password !== \"\" ? (\r\n                    <button\r\n                      className=\"clear\"\r\n                      onClick={() => setPassword(\"\")}\r\n                    ></button>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n              <button className=\"main__accordion-button\">\r\n                Активировать ДНК-тест\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default MainPage;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport MainPage from \"./components/main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage></MainPage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}